/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,23],$V1=[1,20],$V2=[1,21],$V3=[1,19],$V4=[1,22],$V5=[1,24],$V6=[1,47],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,43],$Vg=[1,44],$Vh=[1,41],$Vi=[1,42],$Vj=[1,45],$Vk=[1,46],$Vl=[1,38],$Vm=[1,40],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[5,20,21,22,25,26,27,28,32,34,36,37,38,39,40,41,46,48,80,81,87,88,89,90,97,101,105,111,112,113,114,115,116,117,118],$Vx=[5,20,21,22,25,26,27,28,32,34,35,36,37,38,39,40,41,46,48,80,81,87,88,89,90,97,101,105,111,112,113,114,115,116,117,118],$Vy=[5,20,21,22,25,26,27,28,32,34,35,36,37,38,39,40,41,46,48,50,51,52,53,54,55,56,57,58,59,60,62,63,65,66,67,69,70,71,72,73,74,76,77,78,80,81,83,84,85,87,88,89,90,97,100,101,105,111,112,113,114,115,116,117,118],$Vz=[2,6],$VA=[1,66],$VB=[1,67],$VC=[1,71],$VD=[1,103],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[1,107],$VI=[1,108],$VJ=[1,109],$VK=[1,110],$VL=[1,111],$VM=[1,112],$VN=[1,113],$VO=[1,82],$VP=[1,83],$VQ=[1,84],$VR=[1,85],$VS=[1,86],$VT=[1,87],$VU=[1,88],$VV=[1,89],$VW=[1,90],$VX=[1,91],$VY=[1,92],$VZ=[1,93],$V_=[1,94],$V$=[1,95],$V01=[1,96],$V11=[1,97],$V21=[1,98],$V31=[1,99],$V41=[1,100],$V51=[1,101],$V61=[1,102],$V71=[1,79],$V81=[1,81],$V91=[22,23,26,30,32,47,50,51,52,53,54,55,56,57,58,59,60,62,63,65,66,67,69,70,71,72,73,74,76,77,78,80,81,83,84,85,87,88,100,105,106],$Va1=[22,25,28,80,81,87,88,89,90,97,101,105,111,112,113,114,115,116,117,118],$Vb1=[22,23,25,26,28,30,32,34,35,36,37,38,39,40,41,46,47,48,50,51,52,53,54,55,56,57,58,59,60,62,63,65,66,67,69,70,71,72,73,74,76,77,78,80,81,83,84,85,87,88,89,90,97,100,101,105,106,111,112,113,114,115,116,117,118,122,123],$Vc1=[26,30,32,73,74],$Vd1=[1,189],$Ve1=[1,190],$Vf1=[1,132],$Vg1=[1,153],$Vh1=[1,140],$Vi1=[1,141],$Vj1=[1,144],$Vk1=[1,142],$Vl1=[1,143],$Vm1=[1,147],$Vn1=[1,149],$Vo1=[1,145],$Vp1=[1,146],$Vq1=[1,191],$Vr1=[1,148],$Vs1=[1,163],$Vt1=[1,164],$Vu1=[1,165],$Vv1=[1,161],$Vw1=[1,162],$Vx1=[1,167],$Vy1=[1,168],$Vz1=[1,166],$VA1=[1,169],$VB1=[1,171],$VC1=[1,170],$VD1=[1,174],$VE1=[1,173],$VF1=[1,184],$VG1=[1,183],$VH1=[1,185],$VI1=[1,154],$VJ1=[1,155],$VK1=[1,156],$VL1=[1,157],$VM1=[1,180],$VN1=[1,182],$VO1=[1,181],$VP1=[1,175],$VQ1=[1,176],$VR1=[1,177],$VS1=[1,178],$VT1=[1,179],$VU1=[1,159],$VV1=[1,160],$VW1=[1,186],$VX1=[1,158],$VY1=[1,139],$VZ1=[1,172],$V_1=[1,150],$V$1=[1,187],$V02=[1,188],$V12=[1,151],$V22=[1,152],$V32=[1,138],$V42=[1,137],$V52=[1,192],$V62=[1,195],$V72=[23,30],$V82=[2,29],$V92=[1,203],$Va2=[23,26,30,32,47,106],$Vb2=[30,106],$Vc2=[5,20,21,22,23,25,26,27,28,30,32,34,35,36,37,38,39,40,41,46,47,48,50,51,52,53,54,55,56,57,58,59,60,62,63,65,66,67,69,70,71,72,73,74,76,77,78,80,81,83,84,85,87,88,89,90,97,100,101,105,106,111,112,113,114,115,116,117,118],$Vd2=[2,18],$Ve2=[1,231],$Vf2=[2,19],$Vg2=[22,32,50,51,52,53,54,55,56,57,58,59,60,62,63,65,66,67,69,70,71,72,73,74,76,77,78,80,81,83,84,85,87,88,100,105],$Vh2=[26,46,48],$Vi2=[2,45],$Vj2=[1,265],$Vk2=[26,46];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Program":3,"StatementList":4,"EOF":5,"Statement":6,"StatementNoBlock":7,"Block":8,"Comment":9,"BlockBody":10,"ExpressionStatement":11,"MacroStatement":12,"EmptyStatement":13,"IfStatement":14,"WhileStatement":15,"ContinueStatement":16,"BreakStatement":17,"ReturnStatement":18,"SwitchStatement":19,"LINE_COMMENT":20,"BLOCK_COMMENT":21,"(":22,")":23,"FormalParameterList":24,"{":25,"}":26,"#":27,"IDENTIFIER":28,"FormalParameterItem":29,",":30,"OUT":31,";":32,"Expression":33,"IF":34,"ELSE":35,"DO":36,"WHILE":37,"CONTINUE":38,"BREAK":39,"RETURN":40,"SWITCH":41,"CaseBlock":42,"CaseClauses":43,"DefaultClause":44,"CaseClause":45,"CASE":46,":":47,"DEFAULT":48,"AssignmentOperator":49,"ASSIGN_TIMES":50,"ASSIGN_DIVIDE":51,"ASSIGN_REMAINDER":52,"ASSIGN_PLUS":53,"ASSIGN_MINUS":54,"ASSIGN_LSHIFT":55,"ASSIGN_RSHIFT":56,"ASSIGN_URSHIFT":57,"ASSIGN_BAND":58,"ASSIGN_BOR":59,"ASSIGN_XOR":60,"LogicalOperator":61,"OR":62,"AND":63,"BinaryOperator":64,"^":65,"&":66,"|":67,"ComparisonOperator":68,"EQUAL":69,"NOT_EQUAL":70,"GTE":71,"LTE":72,">":73,"<":74,"ShiftOperator":75,"URSHIFT":76,"RSHIFT":77,"LSHIFT":78,"PlusMinusOperator":79,"+":80,"-":81,"TimesDivideOperator":82,"*":83,"/":84,"%":85,"PrefixOperator":86,"INCREMENT":87,"DECREMENT":88,"~":89,"!":90,"PostfixOperator":91,"ParameterList":92,"AssignmentExpression":93,"ImportExpression":94,"Identifier":95,"Literal":96,"INTERNAL_IDENTIFIER":97,"MapExpression":98,"ParameterItem":99,"=":100,"IMPORT":101,"KeyLiteral":102,"NumberLiteral":103,"StringLiteral":104,"[":105,"]":106,"PropertyNameAndValueList":107,"KeyValueExpression":108,"NullLiteral":109,"CommandLiteral":110,"NULL":111,"NUMBER":112,"INFINITY":113,"NAN":114,"TRUE":115,"FALSE":116,"STRING":117,"COMMAND_NAME":118,"CommandArguments":119,"CommandArgument":120,"CommandText":121,"ESCAPE_SEQUENCE":122,"INVALID":123,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"LINE_COMMENT",21:"BLOCK_COMMENT",22:"(",23:")",25:"{",26:"}",27:"#",28:"IDENTIFIER",30:",",31:"OUT",32:";",34:"IF",35:"ELSE",36:"DO",37:"WHILE",38:"CONTINUE",39:"BREAK",40:"RETURN",41:"SWITCH",46:"CASE",47:":",48:"DEFAULT",50:"ASSIGN_TIMES",51:"ASSIGN_DIVIDE",52:"ASSIGN_REMAINDER",53:"ASSIGN_PLUS",54:"ASSIGN_MINUS",55:"ASSIGN_LSHIFT",56:"ASSIGN_RSHIFT",57:"ASSIGN_URSHIFT",58:"ASSIGN_BAND",59:"ASSIGN_BOR",60:"ASSIGN_XOR",62:"OR",63:"AND",65:"^",66:"&",67:"|",69:"EQUAL",70:"NOT_EQUAL",71:"GTE",72:"LTE",73:">",74:"<",76:"URSHIFT",77:"RSHIFT",78:"LSHIFT",80:"+",81:"-",83:"*",84:"/",85:"%",87:"INCREMENT",88:"DECREMENT",89:"~",90:"!",97:"INTERNAL_IDENTIFIER",100:"=",101:"IMPORT",105:"[",106:"]",111:"NULL",112:"NUMBER",113:"INFINITY",114:"NAN",115:"TRUE",116:"FALSE",117:"STRING",118:"COMMAND_NAME",122:"ESCAPE_SEQUENCE",123:"INVALID"},
productions_: [0,[3,2],[3,1],[6,1],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[9,1],[9,1],[8,3],[8,4],[8,1],[10,3],[4,2],[4,0],[12,3],[12,5],[12,6],[24,1],[24,3],[29,1],[29,2],[13,1],[11,2],[14,5],[14,7],[15,7],[15,5],[16,2],[17,2],[18,2],[18,3],[19,5],[42,3],[42,5],[43,2],[43,0],[45,4],[44,3],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[61,1],[61,1],[64,1],[64,1],[64,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[75,1],[75,1],[75,1],[79,1],[79,1],[82,1],[82,1],[82,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[91,1],[91,1],[33,3],[33,1],[33,3],[33,4],[33,1],[33,1],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,2],[33,2],[33,1],[33,1],[33,3],[33,4],[33,1],[92,1],[92,3],[99,1],[99,2],[93,3],[93,3],[94,2],[102,1],[102,1],[102,1],[95,1],[95,4],[98,2],[98,3],[98,4],[107,1],[107,3],[108,3],[108,1],[96,1],[96,1],[96,1],[96,1],[109,1],[103,1],[103,1],[103,1],[103,1],[103,1],[104,1],[110,1],[110,2],[119,1],[119,2],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[121,1],[120,3],[120,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new Program($$[$0-1], parser.__macroList, createSourceLocation(parser.currentFile, _$[$0-1], _$[$0])); 
break;
case 2:
 return new Program([], parser.__macroList, createSourceLocation(parser.currentFile, _$[$0], _$[$0])); 
break;
case 16:
this.$ = new LineComment($$[$0], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 17:
this.$ = new BlockComment($$[$0], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 18:
this.$ = new BlockStatement([], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 19:
this.$ = new BlockStatement($$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0]));;
break;
case 20:
this.$ = new BlockStatement([], $$[$0], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 21:
this.$ = new BlockBodyStatement($$[$0-1], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 22:
this.$ = $$[$0] == null ? $$[$0-1] : $$[$0-1].concat($$[$0]);;
break;
case 23: case 45:
this.$ = [];;
break;
case 24:
 addMacro(new MacroStatement(new Identifier($$[$0-1], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0-1])), [], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]))); this.$ = null; 
break;
case 25:
 addMacro(new MacroStatement(new Identifier($$[$0-3], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0-3])), [], $$[$0], createSourceLocation(parser.currentFile, _$[$0-4], _$[$0]))); this.$ = null; 
break;
case 26:
 addMacro(new MacroStatement(new Identifier($$[$0-4], createSourceLocation(parser.currentFile, _$[$0-4], _$[$0-4])), $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-5], _$[$0]))); this.$ = null; 
break;
case 27: case 120: case 137:
this.$ = [$$[$0]];;
break;
case 28: case 121:
this.$ = $$[$0-2].concat($$[$0]);;
break;
case 29: case 115:
this.$ = new Identifier($$[$0], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 30:
this.$ = new OutIdentifier($$[$0], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 31:
this.$ = new EmptyStatement(createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 32:
this.$ = new ExpressionStatement($$[$0-1], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 33:
this.$ = new IfStatement($$[$0-2], $$[$0], null, createSourceLocation(parser.currentFile, _$[$0-4], _$[$0]));;
break;
case 34:
this.$ = new IfStatement($$[$0-4], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-6], _$[$0]));;
break;
case 35:
this.$ = new DoWhileStatement($$[$0-5], $$[$0-2], createSourceLocation(parser.currentFile, _$[$0-6], _$[$0]));;
break;
case 36:
this.$ = new WhileStatement($$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-4], _$[$0]));;
break;
case 37:
this.$ = new ContinueStatement(createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 38:
this.$ = new BreakStatement(createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 39:
this.$ = new ReturnStatement(null, createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 40:
this.$ = new ReturnStatement($$[$0-1], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 41:
this.$ = new SwitchStatement($$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-4], _$[$0]));;
break;
case 42: case 198:
this.$ = $$[$0-1];;
break;
case 43:
this.$ = $$[$0-3].concat($$[$0-2]).concat($$[$0-1]);;
break;
case 44: case 138:
this.$ = $$[$0-1].concat($$[$0]);;
break;
case 46:
this.$ = new SwitchCase($$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0]));;
break;
case 47:
this.$ = new SwitchCase(null, $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 86:
this.$ = $$[$0-1];
break;
case 88:
this.$ = new CallExpression($$[$0-2], [], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 89:
this.$ = new CallExpression($$[$0-3], $$[$0-1], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0]));;
break;
case 92:
this.$ = new LogicalExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 93:
this.$ = new BinaryExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 94:
this.$ = new ComparisonExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 95:
this.$ = new ShiftExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 96: case 97:
this.$ = new MathExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 98:
this.$ = new UnaryExpression($$[$0], $$[$0-1], false, createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 99:
this.$ = new UnaryExpression($$[$0-1], false, $$[$0], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 102:
this.$ = new InternalCallExpression($$[$0-2], [], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 103:
this.$ = new InternalCallExpression($$[$0-3], $$[$0-1], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0]));;
break;
case 105:
this.$ = [$$[$0]];
break;
case 106:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 107:
this.$ = $$[$0];
break;
case 108:
this.$ = new OutExpression($$[$0]);
break;
case 109:
this.$ = new AssignmentExpression("=", $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 110:
this.$ = new AssignmentExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 111:
this.$ = new ImportExpression($$[$0], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 116:
this.$ = new MemberExpression($$[$0-3], $$[$0-1], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0]));;
break;
case 117:
this.$ = new MapExpression([], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 118:
this.$ = new MapExpression($$[$0-1], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 119:
this.$ = new MapExpression($$[$0-2], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0]));;
break;
case 122:
this.$ = new KeyValueExpression($$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 123:
this.$ = new KeyValueExpression(null, $$[$0], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 128:
this.$ = new NullLiteral(createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 129:
this.$ = new NumberLiteral(parseNumericLiteral($$[$0]), createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 130:
this.$ = new NumberLiteral(Infinity, createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 131:
this.$ = new NumberLiteral(NaN, createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 132:
this.$ = new NumberLiteral(1, createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 133:
this.$ = new NumberLiteral(0, createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 134:
this.$ = new StringLiteral($$[$0], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 135:
this.$ = new CommandLiteral($$[$0], [], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 136:
this.$ = new CommandLiteral($$[$0-1], $$[$0], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
}
},
table: [o([20,21,22,25,27,28,32,34,36,37,38,39,40,41,80,81,87,88,89,90,97,101,105,111,112,113,114,115,116,117,118],$V0,{3:1,4:2,5:[1,3]}),{1:[3]},{5:[1,4],6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V1,21:$V2,22:$V3,25:$V4,27:$V5,28:$V6,32:$V7,33:23,34:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{1:[2,2]},{1:[2,1]},o($Vw,[2,22]),o($Vx,[2,3]),o($Vy,[2,4]),o($Vx,[2,5]),o($Vy,$Vz),o($Vx,[2,7]),o($Vx,[2,8]),o($Vx,[2,9]),o($Vx,[2,10]),o($Vx,[2,11]),o($Vx,[2,12]),o($Vx,[2,13]),o($Vx,[2,14]),o($Vx,[2,15]),{8:65,10:68,22:$V3,23:[1,61],24:62,25:$V4,28:$VA,29:64,31:$VB,33:63,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Vx,[2,16]),o($Vx,[2,17]),o([20,21,22,25,26,27,28,32,34,36,37,38,39,40,41,80,81,87,88,89,90,97,101,105,111,112,113,114,115,116,117,118],$V0,{4:69}),{22:$VC,32:[1,70],49:80,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:72,62:$VO,63:$VP,64:73,65:$VQ,66:$VR,67:$VS,68:74,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:75,76:$VZ,77:$V_,78:$V$,79:76,80:$V01,81:$V11,82:77,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,91:78,100:$V71,105:$V81},{28:[1,114]},o($Vx,[2,31]),{22:[1,115]},{6:116,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V1,21:$V2,22:$V3,25:$V4,27:$V5,28:$V6,32:$V7,33:23,34:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{22:[1,117]},{32:[1,118]},{32:[1,119]},{8:65,10:68,22:$V3,25:$V4,28:$V6,32:[1,120],33:121,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{22:[1,122]},o($V91,[2,90]),o($V91,[2,91]),{8:65,10:68,22:$V3,25:$V4,28:$V6,33:123,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($V91,[2,100]),o($V91,[2,101]),{22:[1,124]},o($V91,[2,104]),{8:65,10:68,22:$V3,25:$V4,28:$V6,33:125,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Va1,[2,78]),o($Va1,[2,79]),o($Va1,[2,80]),o($Va1,[2,81]),o($Va1,[2,82]),o($Va1,[2,83]),o($V91,[2,115]),o($V91,[2,124]),o($V91,[2,125]),o($V91,[2,126]),o($V91,[2,127]),{8:65,10:68,22:$V3,25:$V4,28:$V6,33:129,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,106:[1,126],107:127,108:128,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Vb1,[2,128]),o($Vb1,[2,129]),o($V91,[2,130]),o($V91,[2,131]),o($Vb1,[2,132]),o($Vb1,[2,133]),o($Vb1,[2,134]),o($Vc1,[2,135],{119:130,120:131,121:133,109:134,103:135,104:136,22:$Vd1,23:$Ve1,25:$Vf1,28:$Vg1,34:$Vh1,35:$Vi1,36:$Vj1,37:$Vk1,38:$Vl1,39:$Vm1,40:$Vn1,41:$Vo1,46:$Vp1,47:$Vq1,48:$Vr1,50:$Vs1,51:$Vt1,52:$Vu1,53:$Vv1,54:$Vw1,55:$Vx1,56:$Vy1,57:$Vz1,58:$VA1,59:$VB1,60:$VC1,62:$VD1,63:$VE1,65:$VF1,66:$VG1,67:$VH1,69:$VI1,70:$VJ1,71:$VK1,72:$VL1,76:$VM1,77:$VN1,78:$VO1,80:$VP1,81:$VQ1,83:$VR1,84:$VS1,85:$VT1,87:$VU1,88:$VV1,89:$VW1,90:$VX1,97:$VY1,100:$VZ1,101:$V_1,105:$V$1,106:$V02,111:$Vo,112:$Vp,113:$V12,114:$V22,115:$Vs,116:$Vt,117:$Vu,118:$V32,122:$V42,123:$V52}),{10:193,25:$V4},{23:[1,194],30:$V62},{22:$VC,23:[1,196],49:80,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:72,62:$VO,63:$VP,64:73,65:$VQ,66:$VR,67:$VS,68:74,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:75,76:$VZ,77:$V_,78:$V$,79:76,80:$V01,81:$V11,82:77,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,91:78,100:$V71,105:$V81},o($V72,[2,27]),o($V91,[2,87]),o([22,23,30,50,51,52,53,54,55,56,57,58,59,60,62,63,65,66,67,69,70,71,72,73,74,76,77,78,80,81,83,84,85,87,88,100,105],$V82),{28:[1,197]},o($V91,[2,20]),{6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V1,21:$V2,22:$V3,25:$V4,26:[1,198],27:$V5,28:$V6,32:$V7,33:23,34:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Vx,[2,32]),{8:65,10:68,22:$V3,23:[1,199],25:$V4,28:$V6,31:$V92,33:202,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,92:200,93:33,94:34,95:36,96:37,97:$Vl,98:39,99:201,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:204,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:205,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:206,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:207,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:208,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:209,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($V91,[2,99]),{8:65,10:68,22:$V3,25:$V4,28:$V6,33:210,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:211,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:212,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Va1,[2,59]),o($Va1,[2,60]),o($Va1,[2,61]),o($Va1,[2,62]),o($Va1,[2,63]),o($Va1,[2,64]),o($Va1,[2,65]),o($Va1,[2,66]),o($Va1,[2,67]),o($Va1,[2,68]),o($Va1,[2,69]),o($Va1,[2,70]),o($Va1,[2,71]),o($Va1,[2,72]),o($Va1,[2,73]),o($Va1,[2,74]),o($Va1,[2,75]),o($Va1,[2,76]),o($Va1,[2,77]),o($V91,[2,84]),o($V91,[2,85]),o($Va1,[2,48]),o($Va1,[2,49]),o($Va1,[2,50]),o($Va1,[2,51]),o($Va1,[2,52]),o($Va1,[2,53]),o($Va1,[2,54]),o($Va1,[2,55]),o($Va1,[2,56]),o($Va1,[2,57]),o($Va1,[2,58]),{7:213,8:65,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V1,21:$V2,22:[1,214],25:$V4,27:$V5,28:$V6,32:$V7,33:23,34:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:215,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{37:[1,216]},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:217,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Vx,[2,37]),o($Vx,[2,38]),o($Vx,[2,39]),{22:$VC,32:[1,218],49:80,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:72,62:$VO,63:$VP,64:73,65:$VQ,66:$VR,67:$VS,68:74,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:75,76:$VZ,77:$V_,78:$V$,79:76,80:$V01,81:$V11,82:77,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,91:78,100:$V71,105:$V81},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:219,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Va2,[2,98],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),{8:65,10:68,22:$V3,23:[1,220],25:$V4,28:$V6,31:$V92,33:202,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,92:221,93:33,94:34,95:36,96:37,97:$Vl,98:39,99:201,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Va2,[2,111],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),o($V91,[2,117]),{30:[1,223],106:[1,222]},o($Vb2,[2,120]),o($Vb2,[2,123],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,47:[1,224],50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),o($Vc1,[2,136],{121:133,109:134,103:135,104:136,120:225,22:$Vd1,23:$Ve1,25:$Vf1,28:$Vg1,34:$Vh1,35:$Vi1,36:$Vj1,37:$Vk1,38:$Vl1,39:$Vm1,40:$Vn1,41:$Vo1,46:$Vp1,47:$Vq1,48:$Vr1,50:$Vs1,51:$Vt1,52:$Vu1,53:$Vv1,54:$Vw1,55:$Vx1,56:$Vy1,57:$Vz1,58:$VA1,59:$VB1,60:$VC1,62:$VD1,63:$VE1,65:$VF1,66:$VG1,67:$VH1,69:$VI1,70:$VJ1,71:$VK1,72:$VL1,76:$VM1,77:$VN1,78:$VO1,80:$VP1,81:$VQ1,83:$VR1,84:$VS1,85:$VT1,87:$VU1,88:$VV1,89:$VW1,90:$VX1,97:$VY1,100:$VZ1,101:$V_1,105:$V$1,106:$V02,111:$Vo,112:$Vp,113:$V12,114:$V22,115:$Vs,116:$Vt,117:$Vu,118:$V32,122:$V42,123:$V52}),o($Vb1,[2,137]),{8:65,10:68,22:$V3,25:$V4,28:$V6,33:226,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Vb1,[2,199]),o($Vb1,[2,139]),o($Vb1,[2,140]),o($Vb1,[2,141]),o($Vb1,[2,142]),o($Vb1,[2,143]),o($Vb1,[2,144]),o($Vb1,[2,145]),o($Vb1,[2,146]),o($Vb1,[2,147]),o($Vb1,[2,148]),o($Vb1,[2,149]),o($Vb1,[2,150]),o($Vb1,[2,151]),o($Vb1,[2,152]),o($Vb1,[2,153]),o($Vb1,[2,154]),o($Vb1,[2,155]),o($Vb1,[2,156]),o($Vb1,[2,157]),o($Vb1,[2,158]),o($Vb1,[2,159]),o($Vb1,[2,160]),o($Vb1,[2,161]),o($Vb1,[2,162]),o($Vb1,[2,163]),o($Vb1,[2,164]),o($Vb1,[2,165]),o($Vb1,[2,166]),o($Vb1,[2,167]),o($Vb1,[2,168]),o($Vb1,[2,169]),o($Vb1,[2,170]),o($Vb1,[2,171]),o($Vb1,[2,172]),o($Vb1,[2,173]),o($Vb1,[2,174]),o($Vb1,[2,175]),o($Vb1,[2,176]),o($Vb1,[2,177]),o($Vb1,[2,178]),o($Vb1,[2,179]),o($Vb1,[2,180]),o($Vb1,[2,181]),o($Vb1,[2,182]),o($Vb1,[2,183]),o($Vb1,[2,184]),o($Vb1,[2,185]),o($Vb1,[2,186]),o($Vb1,[2,187]),o($Vb1,[2,188]),o($Vb1,[2,189]),o($Vb1,[2,190]),o($Vb1,[2,191]),o($Vb1,[2,192]),o($Vb1,[2,193]),o($Vb1,[2,194]),o($Vb1,[2,195]),o($Vb1,[2,196]),o($Vb1,[2,197]),o($Vc2,$Vd2),{10:227,25:$V4},{28:[1,229],29:228,31:$VB},o($V91,[2,86]),o($V72,[2,30]),o($Vc2,[2,21]),o($V91,[2,88]),{23:[1,230],30:$Ve2},o($V72,[2,105]),o($V72,[2,107],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),{8:65,10:68,22:$V3,25:$V4,28:$V6,33:232,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Va2,[2,92],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),o($Va2,[2,93],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),o($Va2,[2,94],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),o($Va2,[2,95],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),o($Va2,[2,96],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),o($Va2,[2,97],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),o($Va2,[2,109],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),o($Va2,[2,110],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),{22:$VC,49:80,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:72,62:$VO,63:$VP,64:73,65:$VQ,66:$VR,67:$VS,68:74,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:75,76:$VZ,77:$V_,78:$V$,79:76,80:$V01,81:$V11,82:77,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,91:78,100:$V71,105:$V81,106:[1,233]},o($Vx,[2,24]),{8:65,10:68,22:$V3,23:[1,234],24:235,25:$V4,28:$VA,29:64,31:$VB,33:63,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{22:$VC,23:[1,236],49:80,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:72,62:$VO,63:$VP,64:73,65:$VQ,66:$VR,67:$VS,68:74,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:75,76:$VZ,77:$V_,78:$V$,79:76,80:$V01,81:$V11,82:77,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,91:78,100:$V71,105:$V81},{22:[1,237]},{22:$VC,23:[1,238],49:80,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:72,62:$VO,63:$VP,64:73,65:$VQ,66:$VR,67:$VS,68:74,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:75,76:$VZ,77:$V_,78:$V$,79:76,80:$V01,81:$V11,82:77,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,91:78,100:$V71,105:$V81},o($Vx,[2,40]),{22:$VC,23:[1,239],49:80,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:72,62:$VO,63:$VP,64:73,65:$VQ,66:$VR,67:$VS,68:74,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:75,76:$VZ,77:$V_,78:$V$,79:76,80:$V01,81:$V11,82:77,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,91:78,100:$V71,105:$V81},o($V91,[2,102]),{23:[1,240],30:$Ve2},o($V91,[2,118]),{8:65,10:68,22:$V3,25:$V4,28:$V6,33:129,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,106:[1,241],108:242,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:243,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Vb1,[2,138]),{22:$VC,26:[1,244],49:80,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:72,62:$VO,63:$VP,64:73,65:$VQ,66:$VR,67:$VS,68:74,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:75,76:$VZ,77:$V_,78:$V$,79:76,80:$V01,81:$V11,82:77,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,91:78,100:$V71,105:$V81},o($Vc2,$Vf2),o($V72,[2,28]),o($V72,$V82),o($V91,[2,89]),{8:65,10:68,22:$V3,25:$V4,28:$V6,31:$V92,33:202,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,99:245,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($V72,[2,108],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),o($V91,[2,116]),{7:246,8:65,9:8,10:247,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V1,21:$V2,22:$V3,25:$V4,27:$V5,28:$V6,32:$V7,33:23,34:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{23:[1,248],30:$V62},{6:249,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V1,21:$V2,22:$V3,25:$V4,27:$V5,28:$V6,32:$V7,33:23,34:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:250,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{6:251,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V1,21:$V2,22:$V3,25:$V4,27:$V5,28:$V6,32:$V7,33:23,34:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{25:[1,253],42:252},o($V91,[2,103]),o($V91,[2,119]),o($Vb2,[2,121]),o($Vb2,[2,122],{61:72,64:73,68:74,75:75,79:76,82:77,91:78,49:80,22:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VO,63:$VP,65:$VQ,66:$VR,67:$VS,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,76:$VZ,77:$V_,78:$V$,80:$V01,81:$V11,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,100:$V71,105:$V81}),o($Vb1,[2,198]),o($V72,[2,106]),o($Vx,[2,25]),o($Vg2,$Vd2,{5:$Vz,20:$Vz,21:$Vz,25:$Vz,26:$Vz,27:$Vz,28:$Vz,34:$Vz,35:$Vz,36:$Vz,37:$Vz,38:$Vz,39:$Vz,40:$Vz,41:$Vz,46:$Vz,48:$Vz,89:$Vz,90:$Vz,97:$Vz,101:$Vz,111:$Vz,112:$Vz,113:$Vz,114:$Vz,115:$Vz,116:$Vz,117:$Vz,118:$Vz}),{7:254,8:65,9:8,10:255,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V1,21:$V2,22:$V3,25:$V4,27:$V5,28:$V6,32:$V7,33:23,34:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},o($Vw,[2,33],{35:[1,256]}),{22:$VC,23:[1,257],49:80,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:72,62:$VO,63:$VP,64:73,65:$VQ,66:$VR,67:$VS,68:74,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:75,76:$VZ,77:$V_,78:$V$,79:76,80:$V01,81:$V11,82:77,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,91:78,100:$V71,105:$V81},o($Vx,[2,36]),o($Vx,[2,41]),o($Vh2,$Vi2,{43:258}),o($Vx,[2,26]),o($Vg2,$Vf2,{5:$Vz,20:$Vz,21:$Vz,25:$Vz,26:$Vz,27:$Vz,28:$Vz,34:$Vz,35:$Vz,36:$Vz,37:$Vz,38:$Vz,39:$Vz,40:$Vz,41:$Vz,46:$Vz,48:$Vz,89:$Vz,90:$Vz,97:$Vz,101:$Vz,111:$Vz,112:$Vz,113:$Vz,114:$Vz,115:$Vz,116:$Vz,117:$Vz,118:$Vz}),{6:259,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V1,21:$V2,22:$V3,25:$V4,27:$V5,28:$V6,32:$V7,33:23,34:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{32:[1,260]},{26:[1,261],44:262,45:263,46:$Vj2,48:[1,264]},o($Vx,[2,34]),o($Vx,[2,35]),o($Vx,[2,42]),o($Vk2,$Vi2,{43:266}),o($Vh2,[2,44]),{47:[1,267]},{8:65,10:68,22:$V3,25:$V4,28:$V6,33:268,80:$Vf,81:$Vg,86:35,87:$Vh,88:$Vi,89:$Vj,90:$Vk,93:33,94:34,95:36,96:37,97:$Vl,98:39,101:$Vm,103:49,104:50,105:$Vn,109:48,110:51,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv},{26:[1,269],45:263,46:$Vj2},o([20,21,22,25,26,27,28,32,34,36,37,38,39,40,41,46,80,81,87,88,89,90,97,101,105,111,112,113,114,115,116,117,118],$V0,{4:270}),{22:$VC,47:[1,271],49:80,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:72,62:$VO,63:$VP,64:73,65:$VQ,66:$VR,67:$VS,68:74,69:$VT,70:$VU,71:$VV,72:$VW,73:$VX,74:$VY,75:75,76:$VZ,77:$V_,78:$V$,79:76,80:$V01,81:$V11,82:77,83:$V21,84:$V31,85:$V41,87:$V51,88:$V61,91:78,100:$V71,105:$V81},o($Vx,[2,43]),o($Vk2,[2,47],{6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,33:23,93:33,94:34,86:35,95:36,96:37,98:39,109:48,103:49,104:50,110:51,20:$V1,21:$V2,22:$V3,25:$V4,27:$V5,28:$V6,32:$V7,34:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,80:$Vf,81:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,97:$Vl,101:$Vm,105:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv}),o([20,21,22,25,26,27,28,32,34,36,37,38,39,40,41,46,48,80,81,87,88,89,90,97,101,105,111,112,113,114,115,116,117,118],$V0,{4:272}),o($Vh2,[2,46],{6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,33:23,93:33,94:34,86:35,95:36,96:37,98:39,109:48,103:49,104:50,110:51,20:$V1,21:$V2,22:$V3,25:$V4,27:$V5,28:$V6,32:$V7,34:$V8,36:$V9,37:$Va,38:$Vb,39:$Vc,40:$Vd,41:$Ve,80:$Vf,81:$Vg,87:$Vh,88:$Vi,89:$Vj,90:$Vk,97:$Vl,101:$Vm,105:$Vn,111:$Vo,112:$Vp,113:$Vq,114:$Vr,115:$Vs,116:$Vt,117:$Vu,118:$Vv})],
defaultActions: {3:[2,2],4:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var _originalParserMethod = parser.parse;

parser.parse = function(input, source) {
  parser.__macroList = {};
  parser.currentFile = source;
  return _originalParserMethod.call(this, input);
};

parser.ast = {};


function createSourceLocation(source, firstToken, lastToken) {
  return new SourceLocation(source, new Position(firstToken.first_line, firstToken.first_column), new Position(lastToken.last_line, lastToken.last_column));
}

function parseNumericLiteral(literal) {
  if (literal.charAt(0) === "0") {
    if (literal.charAt(1).toLowerCase() === "x") return parseInt(literal, 16);
    return parseInt(literal, 8);
  } else return Number(literal);
}

function addMacro(macro) {
  var macroList = parser.__macroList;
  var macroName = macro.id.name;
  var paramCount = macro.params.length;

  var macroItems;
  if (macroItems = macroList[macroName]) {
    if (macroItems[paramCount]) throw new Error('Parse Error: A macro with the footprint already exists');
  } else macroItems = macroList[macroName] = {};

  macroItems[paramCount] = macro;
}

/* AST Constructors */

function Program(body, macros, loc) {
  this.type = "Program";
  this.body = body;
  this.macros = macros;
  this.loc = loc;
}
parser.ast.Program = Program;

function Identifier(name, loc) {
  this.type = "Identifier";
  this.name = name;
  this.loc = loc;
}
parser.ast.Identifier = Identifier;

function OutIdentifier(name, loc) {
  this.type = "OutIdentifier";
  this.name = name;
  this.loc = loc;
}
parser.ast.OutIdentifier = OutIdentifier;

function LineComment(text, loc) {
  this.type = "LineComment";
  this.text = text;
  this.loc = loc;
}
parser.ast.LineComment = LineComment;

function BlockComment(text, loc) {
  this.type = "BlockComment";
  this.text = text;
  this.loc = loc;
}
parser.ast.BlockComment = BlockComment;

function BlockStatement(params, body, loc) {
  this.type = "BlockStatement";
  this.params = params;
  this.body = body;
  this.loc = loc;
}
parser.ast.BlockStatement = BlockStatement;

function BlockBodyStatement(body, loc) {
  this.type = "BlockBodyStatement";
  this.body = body;
  this.loc = loc;
}

function StaticMacroStatement(id, body, loc) {
  this.type = "StaticMacroStatement";
  this.id = id;
  this.body = body;
  this.loc = loc;
}
parser.ast.StaticMacroStatement = StaticMacroStatement;

function MacroStatement(id, params, body, loc) {
  this.type = "MacroStatement";
  this.id = id;
  this.params = params;
  this.body = body;
  this.loc = loc;
}
parser.ast.MacroStatement = MacroStatement;

function EmptyStatement(loc) {
  this.type = "EmptyStatement";
  this.loc = loc;
}
parser.ast.EmptyStatement = EmptyStatement;

function ExpressionStatement(expression, loc) {
  this.type = "ExpressionStatement";
  this.expression = expression;
  this.loc = loc;
}
parser.ast.ExpressionStatement = ExpressionStatement;

function IfStatement(test, consequent, alternate, loc) {
  this.type = "IfStatement";
  this.test = test;
  this.consequent = consequent;
  this.alternate = alternate;
  this.loc = loc;
}
parser.ast.IfStatement = IfStatement;

function DoWhileStatement(body, test, loc) {
  this.type = "DoWhileStatement";
  this.body = body;
  this.test = test;
  this.loc = loc;
}
parser.ast.DoWhileStatement = DoWhileStatement;

function WhileStatement(test, body, loc) {
  this.type = "WhileStatement";
  this.test = test;
  this.body = body;
  this.loc = loc;
}
parser.ast.WhileStatement = WhileStatement;

function ContinueStatement(loc) {
  this.type = "ContinueStatement";
  this.loc = loc;
}
parser.ast.ContinueStatement = ContinueStatement;

function BreakStatement(loc) {
  this.type = "BreakStatement";
  this.loc = loc;
}
parser.ast.BreakStatement = BreakStatement;

function ReturnStatement(argument, loc) {
  this.type = "ReturnStatement";
  this.argument = argument;
  this.loc = loc;
}
parser.ast.ReturnStatement = ReturnStatement;

function SwitchStatement(discriminant, cases, loc) {
  this.type = "SwitchStatement";
  this.discriminant = discriminant;
  this.cases = cases;
  this.loc = loc;
}
parser.ast.SwitchStatement = SwitchStatement;

function SwitchCase(test, consequent, loc) {
  this.type = "SwitchCase";
  this.test = test;
  this.consequent = consequent;
  this.loc = loc;
}
parser.ast.SwitchCase = SwitchCase;

function ImportExpression(file, loc) {
  this.type = "ImportExpression";
  this.file = file;
  this.loc = loc;
}
parser.ast.ImportExpression = ImportExpression;

function OutExpression(expression, loc) {
  this.type = "OutExpression";
  this.expression = expression;
  this.loc = loc;
}

function MapExpression(elements, loc) {
  this.type = "MapExpression";
  this.elements = elements;
  this.loc = loc;
}
parser.ast.MapExpression = MapExpression;

function LogicalExpression(operator, left, right, loc) {
  this.type = "LogicalExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.LogicalExpression = LogicalExpression;

function BinaryExpression(operator, left, right, loc) {
  this.type = "BinaryExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.BinaryExpression = BinaryExpression;

function ComparisonExpression(operator, left, right, loc) {
  this.type = "ComparisonExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.ComparisonExpression = ComparisonExpression;

function ShiftExpression(operator, left, right, loc) {
  this.type = "ShiftExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.ShiftExpression = ShiftExpression;

function MathExpression(operator, left, right, loc) {
  this.type = "MathExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.MathExpression = MathExpression;

function UnaryExpression(center, prefix, postfix, loc) {
  this.type = "UnaryExpression";
  this.center = center;
  this.prefix = prefix;
  this.postfix = postfix;
  this.loc = loc;
}
parser.ast.UnaryExpression = UnaryExpression;

function MemberExpression(map, property, loc) {
  this.type = "MemberExpression";
  this.map = map;
  this.property = property;
  this.loc = loc;
}
parser.ast.MemberExpression = MemberExpression;

function CallExpression(block, params, loc) {
  this.type = "CallExpression";
  this.block = block;
  this.params = params;
  this.loc = loc;
}
parser.ast.CallExpression = CallExpression;

function KeyValueExpression(key, value, loc) {
  this.type = "KeyValueExpression";
  this.key = key;
  this.value = value;
  this.loc = loc;
}
parser.ast.KeyValueExpression = KeyValueExpression;

function InternalCallExpression(name, params, loc) {
  this.type = "InternalCallExpression";
  this.name = name;
  this.params = params;
  this.loc = loc;
}
parser.ast.InternalCallExpression = InternalCallExpression;

function AssignmentExpression(operator, left, right, loc) {
  this.type = "AssignmentExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.AssignmentExpression = AssignmentExpression;

function NullLiteral(loc) {
  this.type = "NullLiteral";
  this.loc = loc;
}
parser.ast.NullLiteral = NullLiteral;

function NumberLiteral(value, loc) {
  this.type = "NumberLiteral";
  this.value = value;
  this.loc = loc;
}
parser.ast.NumberLiteral = NumberLiteral;

function StringLiteral(value, loc) {
  this.type = "StringLiteral";
  this.value = value;
  this.loc = loc;
}
parser.ast.StringLiteral = StringLiteral;

function CommandLiteral(name, params, loc) {
  this.type = "CommandLiteral";
  this.name = name;
  this.params = params;
  this.loc = loc;
}
parser.ast.CommandLiteral = CommandLiteral;

function SourceLocation(source, start, end) {
  this.source = source;
  this.start = start;
  this.end = end;
}
parser.ast.SourceLocation = SourceLocation;

function Position(line, column) {
  this.line = line;
  this.column = column;
}
parser.ast.Position = Position;/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 123;
break;
case 1:/* skip whitespace */
break;
case 2:/* fixme: dont skip comments, should be 'BLOCK_COMMENT' */
break;
case 3:/* fixme: dont skip comments, should be 'LINE_COMMENT' */
break;
case 4:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return 117;
break;
case 5:yy_.yytext = yy_.yytext.substr(2); return 122;
break;
case 6:yy_.yytext = yy_.yytext.substr(1); this.begin('command'); return 118;
break;
case 7:yy_.yytext = yy_.yytext.substr(1); return 97;
break;
case 8:return 31;
break;
case 9:return 34;
break;
case 10:return 35;
break;
case 11:return 37;
break;
case 12:return 38;
break;
case 13:return 36;
break;
case 14:return 41;
break;
case 15:return 46;
break;
case 16:return 39;
break;
case 17:return 48;
break;
case 18:return 40;
break;
case 19:return 101;
break;
case 20:return 111;
break;
case 21:return 113;
break;
case 22:return 114;
break;
case 23:return 115;
break;
case 24:return 116;
break;
case 25:return 28;
break;
case 26:return 112;
break;
case 27:return 112;
break;
case 28:return 112;
break;
case 29:return 69;
break;
case 30:return 70;
break;
case 31:return 90;
break;
case 32:return 87;
break;
case 33:return 88;
break;
case 34:return 53;
break;
case 35:return 54;
break;
case 36:return 50;
break;
case 37:return 51;
break;
case 38:return 52;
break;
case 39:return 57;
break;
case 40:return 55;
break;
case 41:return 56;
break;
case 42:return 58;
break;
case 43:return 60;
break;
case 44:return 59;
break;
case 45:return 71;
break;
case 46:return 72;
break;
case 47:return 73;
break;
case 48:return 74;
break;
case 49:return 100;
break;
case 50:return 63;
break;
case 51:return 62;
break;
case 52:return 27;
break;
case 53:return 80;
break;
case 54:return 81;
break;
case 55:return 83;
break;
case 56:return 84;
break;
case 57:return 85;
break;
case 58:return 76;
break;
case 59:return 78;
break;
case 60:return 77;
break;
case 61:return 66;
break;
case 62:return 65;
break;
case 63:return 67;
break;
case 64:return 89;
break;
case 65:return 25;
break;
case 66:return 26;
break;
case 67:return 105;
break;
case 68:return 106;
break;
case 69:return 22;
break;
case 70:return 23;
break;
case 71:this.begin('INITIAL'); return 30;
break;
case 72:return 47;
break;
case 73:this.begin('INITIAL'); return 32;
break;
case 74:return 5;
break;
case 75:return 123;
break;
case 76:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\s+)/i,/^(?:\/\*(.|\r|\n)*?\*\/)/i,/^(?:\/\/.*(\r\n|\r|\n))/i,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7[0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-f]){2})|([u]([0-9a-f]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7[0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-f]){2})|([u]([0-9a-f]){4})))|(\\(\r\n|\r|\n)))*')))/i,/^(?:\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7[0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-f]){2})|([u]([0-9a-f]){4})))/i,/^(?:\/((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*))/i,/^(?:\.((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*))/i,/^(?:out)/i,/^(?:if)/i,/^(?:else)/i,/^(?:while)/i,/^(?:continue)/i,/^(?:do)/i,/^(?:switch)/i,/^(?:case)/i,/^(?:break)/i,/^(?:default)/i,/^(?:return)/i,/^(?:import)/i,/^(?:null)/i,/^(?:infinity)/i,/^(?:nan)/i,/^(?:true)/i,/^(?:false)/i,/^(?:((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*))/i,/^(?:((([0]|(([1-9])([0-9]+)*))\.([0-9]+)*(([e])([+-]?[0-9]+))?)|(\.([0-9]+)(([e])([+-]?[0-9]+))?)|(([0]|(([1-9])([0-9]+)*))(([e])([+-]?[0-9]+))?)))/i,/^(?:([0][x]([0-9a-f])+))/i,/^(?:([0]([0-7])+))/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:%=)/i,/^(?:>>>=)/i,/^(?:<<=)/i,/^(?:>>=)/i,/^(?:&=)/i,/^(?:\^=)/i,/^(?:\|=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:#)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>>)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:\|)/i,/^(?:~)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"command":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"INITIAL":{"rules":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}