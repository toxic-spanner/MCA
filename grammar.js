/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,18],$V1=[1,17],$V2=[1,18],$V3=[1,19],$V4=[1,21],$V5=[1,45],$V6=[1,30],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,25],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,41],$Vg=[1,42],$Vh=[1,39],$Vi=[1,40],$Vj=[1,43],$Vk=[1,44],$Vl=[1,36],$Vm=[1,38],$Vn=[1,50],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,56],$Vu=[1,57],$Vv=[1,58],$Vw=[5,18,19,20,21,22,23,24,30,32,34,35,36,37,38,39,44,46,78,79,85,86,87,88,95,99,103,109,110,111,112,113,114,115,116],$Vx=[5,18,19,20,21,22,23,24,30,32,33,34,35,36,37,38,39,44,46,78,79,85,86,87,88,95,99,103,109,110,111,112,113,114,115,116],$Vy=[1,68],$Vz=[1,93],$VA=[1,94],$VB=[1,95],$VC=[1,96],$VD=[1,97],$VE=[1,98],$VF=[1,99],$VG=[1,100],$VH=[1,101],$VI=[1,102],$VJ=[1,103],$VK=[1,72],$VL=[1,73],$VM=[1,74],$VN=[1,75],$VO=[1,76],$VP=[1,77],$VQ=[1,78],$VR=[1,79],$VS=[1,80],$VT=[1,81],$VU=[1,82],$VV=[1,83],$VW=[1,84],$VX=[1,85],$VY=[1,86],$VZ=[1,87],$V_=[1,88],$V$=[1,89],$V01=[1,90],$V11=[1,91],$V21=[1,92],$V31=[1,69],$V41=[1,71],$V51=[21,24,25,28,30,45,48,49,50,51,52,53,54,55,56,57,58,60,61,63,64,65,67,68,69,70,71,72,74,75,76,78,79,81,82,83,85,86,98,103,104],$V61=[20,23,24,78,79,85,86,87,88,95,99,103,109,110,111,112,113,114,115,116],$V71=[20,21,23,24,25,28,30,32,33,34,35,36,37,38,39,44,45,46,48,49,50,51,52,53,54,55,56,57,58,60,61,63,64,65,67,68,69,70,71,72,74,75,76,78,79,81,82,83,85,86,87,88,95,98,99,103,104,109,110,111,112,113,114,115,116,120,121],$V81=[21,28,30,71,72],$V91=[1,124],$Va1=[1,145],$Vb1=[1,181],$Vc1=[1,182],$Vd1=[1,132],$Ve1=[1,133],$Vf1=[1,136],$Vg1=[1,134],$Vh1=[1,135],$Vi1=[1,139],$Vj1=[1,141],$Vk1=[1,137],$Vl1=[1,138],$Vm1=[1,183],$Vn1=[1,140],$Vo1=[1,155],$Vp1=[1,156],$Vq1=[1,157],$Vr1=[1,153],$Vs1=[1,154],$Vt1=[1,159],$Vu1=[1,160],$Vv1=[1,158],$Vw1=[1,161],$Vx1=[1,163],$Vy1=[1,162],$Vz1=[1,166],$VA1=[1,165],$VB1=[1,176],$VC1=[1,175],$VD1=[1,177],$VE1=[1,146],$VF1=[1,147],$VG1=[1,148],$VH1=[1,149],$VI1=[1,172],$VJ1=[1,174],$VK1=[1,173],$VL1=[1,167],$VM1=[1,168],$VN1=[1,169],$VO1=[1,170],$VP1=[1,171],$VQ1=[1,151],$VR1=[1,152],$VS1=[1,178],$VT1=[1,150],$VU1=[1,131],$VV1=[1,164],$VW1=[1,142],$VX1=[1,179],$VY1=[1,180],$VZ1=[1,143],$V_1=[1,144],$V$1=[1,130],$V02=[1,129],$V12=[1,184],$V22=[1,196],$V32=[21,25,28,30,45,104],$V42=[28,104],$V52=[1,216],$V62=[25,28],$V72=[1,223],$V82=[2,24],$V92=[21,44,46],$Va2=[2,40],$Vb2=[1,255],$Vc2=[21,44];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Program":3,"StatementList":4,"EOF":5,"Statement":6,"Comment":7,"Block":8,"ExpressionStatement":9,"MacroStatement":10,"EmptyStatement":11,"IfStatement":12,"WhileStatement":13,"ContinueStatement":14,"BreakStatement":15,"ReturnStatement":16,"SwitchStatement":17,"LINE_COMMENT":18,"BLOCK_COMMENT":19,"{":20,"}":21,"#":22,"IDENTIFIER":23,"(":24,")":25,"FormalParameterList":26,"FormalParameterItem":27,",":28,"OUT":29,";":30,"Expression":31,"IF":32,"ELSE":33,"DO":34,"WHILE":35,"CONTINUE":36,"BREAK":37,"RETURN":38,"SWITCH":39,"CaseBlock":40,"CaseClauses":41,"DefaultClause":42,"CaseClause":43,"CASE":44,":":45,"DEFAULT":46,"AssignmentOperator":47,"ASSIGN_TIMES":48,"ASSIGN_DIVIDE":49,"ASSIGN_REMAINDER":50,"ASSIGN_PLUS":51,"ASSIGN_MINUS":52,"ASSIGN_LSHIFT":53,"ASSIGN_RSHIFT":54,"ASSIGN_URSHIFT":55,"ASSIGN_BAND":56,"ASSIGN_BOR":57,"ASSIGN_XOR":58,"LogicalOperator":59,"OR":60,"AND":61,"BinaryOperator":62,"^":63,"&":64,"|":65,"ComparisonOperator":66,"EQUAL":67,"NOT_EQUAL":68,"GTE":69,"LTE":70,">":71,"<":72,"ShiftOperator":73,"URSHIFT":74,"RSHIFT":75,"LSHIFT":76,"PlusMinusOperator":77,"+":78,"-":79,"TimesDivideOperator":80,"*":81,"/":82,"%":83,"PrefixOperator":84,"INCREMENT":85,"DECREMENT":86,"~":87,"!":88,"PostfixOperator":89,"AssignmentExpression":90,"ImportExpression":91,"Identifier":92,"Literal":93,"ParameterList":94,"INTERNAL_IDENTIFIER":95,"MapExpression":96,"ParameterItem":97,"=":98,"IMPORT":99,"KeyLiteral":100,"NumberLiteral":101,"StringLiteral":102,"[":103,"]":104,"PropertyNameAndValueList":105,"KeyValueExpression":106,"NullLiteral":107,"CommandLiteral":108,"NULL":109,"NUMBER":110,"INFINITY":111,"NAN":112,"TRUE":113,"FALSE":114,"STRING":115,"COMMAND_NAME":116,"CommandArguments":117,"CommandArgument":118,"CommandText":119,"ESCAPE_SEQUENCE":120,"INVALID":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"LINE_COMMENT",19:"BLOCK_COMMENT",20:"{",21:"}",22:"#",23:"IDENTIFIER",24:"(",25:")",28:",",29:"OUT",30:";",32:"IF",33:"ELSE",34:"DO",35:"WHILE",36:"CONTINUE",37:"BREAK",38:"RETURN",39:"SWITCH",44:"CASE",45:":",46:"DEFAULT",48:"ASSIGN_TIMES",49:"ASSIGN_DIVIDE",50:"ASSIGN_REMAINDER",51:"ASSIGN_PLUS",52:"ASSIGN_MINUS",53:"ASSIGN_LSHIFT",54:"ASSIGN_RSHIFT",55:"ASSIGN_URSHIFT",56:"ASSIGN_BAND",57:"ASSIGN_BOR",58:"ASSIGN_XOR",60:"OR",61:"AND",63:"^",64:"&",65:"|",67:"EQUAL",68:"NOT_EQUAL",69:"GTE",70:"LTE",71:">",72:"<",74:"URSHIFT",75:"RSHIFT",76:"LSHIFT",78:"+",79:"-",81:"*",82:"/",83:"%",85:"INCREMENT",86:"DECREMENT",87:"~",88:"!",95:"INTERNAL_IDENTIFIER",98:"=",99:"IMPORT",103:"[",104:"]",109:"NULL",110:"NUMBER",111:"INFINITY",112:"NAN",113:"TRUE",114:"FALSE",115:"STRING",116:"COMMAND_NAME",120:"ESCAPE_SEQUENCE",121:"INVALID"},
productions_: [0,[3,2],[3,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,1],[7,1],[8,3],[4,2],[4,0],[10,3],[10,5],[10,6],[26,1],[26,3],[27,1],[27,2],[11,1],[9,2],[12,5],[12,7],[13,7],[13,5],[14,2],[15,2],[16,2],[16,3],[17,5],[40,3],[40,5],[41,2],[41,0],[43,4],[42,3],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[59,1],[59,1],[62,1],[62,1],[62,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[73,1],[73,1],[73,1],[77,1],[77,1],[80,1],[80,1],[80,1],[84,1],[84,1],[84,1],[84,1],[84,1],[84,1],[89,1],[89,1],[31,3],[31,1],[31,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,1],[31,1],[31,1],[31,3],[31,4],[31,3],[31,4],[31,1],[94,1],[94,3],[97,1],[97,2],[90,3],[90,3],[91,2],[100,1],[100,1],[100,1],[92,1],[92,4],[96,2],[96,3],[96,4],[105,1],[105,3],[106,3],[106,1],[93,1],[93,1],[93,1],[93,1],[107,1],[101,1],[101,1],[101,1],[101,1],[101,1],[102,1],[108,1],[108,2],[117,1],[117,2],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[119,1],[118,3],[118,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new Program($$[$0-1], parser.__macroList, createSourceLocation(parser.currentFile, _$[$0-1], _$[$0])); 
break;
case 2:
 return new Program([], parser.__macroList, createSourceLocation(parser.currentFile, _$[$0], _$[$0])); 
break;
case 14:
this.$ = new LineComment($$[$0], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 15:
this.$ = new BlockComment($$[$0], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 16:
this.$ = new BlockStatement($$[$0-1], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 17:
this.$ = $$[$0] == null ? $$[$0-1] : $$[$0-1].concat($$[$0]);;
break;
case 18: case 40:
this.$ = [];;
break;
case 19:
 addMacro(new MacroStatement(new Identifier($$[$0-1], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0-1])), [], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]))); this.$ = null; 
break;
case 20:
 addMacro(new MacroStatement(new Identifier($$[$0-3], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0-3])), [], $$[$0], createSourceLocation(parser.currentFile, _$[$0-4], _$[$0]))); this.$ = null; 
break;
case 21:
 addMacro(new MacroStatement(new Identifier($$[$0-4], createSourceLocation(parser.currentFile, _$[$0-4], _$[$0-4])), $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-5], _$[$0]))); this.$ = null; 
break;
case 22: case 115: case 132:
this.$ = [$$[$0]];;
break;
case 23: case 116:
this.$ = $$[$0-2].concat($$[$0]);;
break;
case 24: case 110:
this.$ = new Identifier($$[$0], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 25:
this.$ = new OutIdentifier($$[$0], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 26:
this.$ = new EmptyStatement(createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 27:
this.$ = new ExpressionStatement($$[$0-1], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 28:
this.$ = new IfStatement($$[$0-2], $$[$0], null, createSourceLocation(parser.currentFile, _$[$0-4], _$[$0]));;
break;
case 29:
this.$ = new IfStatement($$[$0-4], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-6], _$[$0]));;
break;
case 30:
this.$ = new DoWhileStatement($$[$0-5], $$[$0-2], createSourceLocation(parser.currentFile, _$[$0-6], _$[$0]));;
break;
case 31:
this.$ = new WhileStatement($$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-4], _$[$0]));;
break;
case 32:
this.$ = new ContinueStatement(createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 33:
this.$ = new BreakStatement(createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 34:
this.$ = new ReturnStatement(null, createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 35:
this.$ = new ReturnStatement($$[$0-1], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 36:
this.$ = new SwitchStatement($$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-4], _$[$0]));;
break;
case 37: case 193:
this.$ = $$[$0-1];;
break;
case 38:
this.$ = $$[$0-3].concat($$[$0-2]).concat($$[$0-1]);;
break;
case 39: case 133:
this.$ = $$[$0-1].concat($$[$0]);;
break;
case 41:
this.$ = new SwitchCase($$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0]));;
break;
case 42:
this.$ = new SwitchCase(null, $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 81:
this.$ = $$[$0-1];
break;
case 84:
this.$ = new LogicalExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 85:
this.$ = new BinaryExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 86:
this.$ = new ComparisonExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 87:
this.$ = new ShiftExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 88: case 89:
this.$ = new MathExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 90:
this.$ = new UnaryExpression($$[$0], $$[$0-1], false, createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 91:
this.$ = new UnaryExpression($$[$0-1], false, $$[$0], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 95:
this.$ = new CallExpression($$[$0-2], [], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 96:
this.$ = new CallExpression($$[$0-3], $$[$0-1], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0]));;
break;
case 97:
this.$ = new InternalCallExpression($$[$0-2], [], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 98:
this.$ = new InternalCallExpression($$[$0-3], $$[$0-1], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0]));;
break;
case 100:
this.$ = [$$[$0]];
break;
case 101:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 102:
this.$ = $$[$0];
break;
case 103:
this.$ = new OutExpression($$[$0]);
break;
case 104:
this.$ = new AssignmentExpression("=", $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 105:
this.$ = new AssignmentExpression($$[$0-1], $$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 106:
this.$ = new ImportExpression($$[$0], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 111:
this.$ = new MemberExpression($$[$0-3], $$[$0-1], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0]));;
break;
case 112:
this.$ = new MapExpression([], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
case 113:
this.$ = new MapExpression($$[$0-1], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 114:
this.$ = new MapExpression($$[$0-2], createSourceLocation(parser.currentFile, _$[$0-3], _$[$0]));;
break;
case 117:
this.$ = new KeyValueExpression($$[$0-2], $$[$0], createSourceLocation(parser.currentFile, _$[$0-2], _$[$0]));;
break;
case 118:
this.$ = new KeyValueExpression(null, $$[$0], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 123:
this.$ = new NullLiteral(createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 124:
this.$ = new NumberLiteral(parseNumericLiteral($$[$0]), createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 125:
this.$ = new NumberLiteral(Infinity, createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 126:
this.$ = new NumberLiteral(NaN, createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 127:
this.$ = new NumberLiteral(1, createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 128:
this.$ = new NumberLiteral(0, createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 129:
this.$ = new StringLiteral($$[$0], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 130:
this.$ = new CommandLiteral($$[$0], [], createSourceLocation(parser.currentFile, _$[$0], _$[$0]));;
break;
case 131:
this.$ = new CommandLiteral($$[$0-1], $$[$0], createSourceLocation(parser.currentFile, _$[$0-1], _$[$0]));;
break;
}
},
table: [o([18,19,20,22,23,24,30,32,34,35,36,37,38,39,78,79,85,86,87,88,95,99,103,109,110,111,112,113,114,115,116],$V0,{3:1,4:2,5:[1,3]}),{1:[3]},{5:[1,4],6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,19:$V2,20:$V3,22:$V4,23:$V5,24:$V6,30:$V7,31:20,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:$Ve,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{1:[2,2]},{1:[2,1]},o($Vw,[2,17]),o($Vx,[2,3]),o([5,18,19,20,21,22,23,24,30,32,33,34,35,36,37,38,39,44,46,48,49,50,51,52,53,54,55,56,57,58,60,61,63,64,65,67,68,69,70,71,72,74,75,76,78,79,81,82,83,85,86,87,88,95,98,99,103,109,110,111,112,113,114,115,116],[2,4]),o($Vx,[2,5]),o($Vx,[2,6]),o($Vx,[2,7]),o($Vx,[2,8]),o($Vx,[2,9]),o($Vx,[2,10]),o($Vx,[2,11]),o($Vx,[2,12]),o($Vx,[2,13]),o($Vx,[2,14]),o($Vx,[2,15]),o([18,19,20,21,22,23,24,30,32,34,35,36,37,38,39,78,79,85,86,87,88,95,99,103,109,110,111,112,113,114,115,116],$V0,{4:59}),{24:$Vy,30:[1,60],47:70,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:61,60:$VK,61:$VL,62:62,63:$VM,64:$VN,65:$VO,66:63,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,73:64,74:$VV,75:$VW,76:$VX,77:65,78:$VY,79:$VZ,80:66,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,89:67,98:$V31,103:$V41},{23:[1,104]},o($Vx,[2,26]),{24:[1,105]},{6:106,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,19:$V2,20:$V3,22:$V4,23:$V5,24:$V6,30:$V7,31:20,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:$Ve,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{24:[1,107]},{30:[1,108]},{30:[1,109]},{8:112,20:$V3,23:$V5,24:$V6,30:[1,110],31:111,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{24:[1,113]},{8:112,20:$V3,23:$V5,24:$V6,31:114,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($V51,[2,82]),o($V51,[2,83]),{8:112,20:$V3,23:$V5,24:$V6,31:115,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($V51,[2,92]),o($V51,[2,93]),{24:[1,116]},o($V51,[2,99]),{8:112,20:$V3,23:$V5,24:$V6,31:117,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($V61,[2,73]),o($V61,[2,74]),o($V61,[2,75]),o($V61,[2,76]),o($V61,[2,77]),o($V61,[2,78]),o($V51,[2,110]),o($V51,[2,119]),o($V51,[2,120]),o($V51,[2,121]),o($V51,[2,122]),{8:112,20:$V3,23:$V5,24:$V6,31:121,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,104:[1,118],105:119,106:120,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($V71,[2,123]),o($V71,[2,124]),o($V51,[2,125]),o($V51,[2,126]),o($V71,[2,127]),o($V71,[2,128]),o($V71,[2,129]),o($V81,[2,130],{117:122,118:123,119:125,107:126,101:127,102:128,20:$V91,23:$Va1,24:$Vb1,25:$Vc1,32:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,36:$Vh1,37:$Vi1,38:$Vj1,39:$Vk1,44:$Vl1,45:$Vm1,46:$Vn1,48:$Vo1,49:$Vp1,50:$Vq1,51:$Vr1,52:$Vs1,53:$Vt1,54:$Vu1,55:$Vv1,56:$Vw1,57:$Vx1,58:$Vy1,60:$Vz1,61:$VA1,63:$VB1,64:$VC1,65:$VD1,67:$VE1,68:$VF1,69:$VG1,70:$VH1,74:$VI1,75:$VJ1,76:$VK1,78:$VL1,79:$VM1,81:$VN1,82:$VO1,83:$VP1,85:$VQ1,86:$VR1,87:$VS1,88:$VT1,95:$VU1,98:$VV1,99:$VW1,103:$VX1,104:$VY1,109:$Vo,110:$Vp,111:$VZ1,112:$V_1,113:$Vs,114:$Vt,115:$Vu,116:$V$1,120:$V02,121:$V12}),{6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,19:$V2,20:$V3,21:[1,185],22:$V4,23:$V5,24:$V6,30:$V7,31:20,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:$Ve,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($Vx,[2,27]),{8:112,20:$V3,23:$V5,24:$V6,31:186,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{8:112,20:$V3,23:$V5,24:$V6,31:187,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{8:112,20:$V3,23:$V5,24:$V6,31:188,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{8:112,20:$V3,23:$V5,24:$V6,31:189,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{8:112,20:$V3,23:$V5,24:$V6,31:190,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{8:112,20:$V3,23:$V5,24:$V6,31:191,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($V51,[2,91]),{8:112,20:$V3,23:$V5,24:$V6,25:[1,192],29:$V22,31:195,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,94:193,95:$Vl,96:37,97:194,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{8:112,20:$V3,23:$V5,24:$V6,31:197,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{8:112,20:$V3,23:$V5,24:$V6,31:198,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{8:112,20:$V3,23:$V5,24:$V6,31:199,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($V61,[2,54]),o($V61,[2,55]),o($V61,[2,56]),o($V61,[2,57]),o($V61,[2,58]),o($V61,[2,59]),o($V61,[2,60]),o($V61,[2,61]),o($V61,[2,62]),o($V61,[2,63]),o($V61,[2,64]),o($V61,[2,65]),o($V61,[2,66]),o($V61,[2,67]),o($V61,[2,68]),o($V61,[2,69]),o($V61,[2,70]),o($V61,[2,71]),o($V61,[2,72]),o($V51,[2,79]),o($V51,[2,80]),o($V61,[2,43]),o($V61,[2,44]),o($V61,[2,45]),o($V61,[2,46]),o($V61,[2,47]),o($V61,[2,48]),o($V61,[2,49]),o($V61,[2,50]),o($V61,[2,51]),o($V61,[2,52]),o($V61,[2,53]),{6:200,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,19:$V2,20:$V3,22:$V4,23:$V5,24:[1,201],30:$V7,31:20,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:$Ve,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{8:112,20:$V3,23:$V5,24:$V6,31:202,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{35:[1,203]},{8:112,20:$V3,23:$V5,24:$V6,31:204,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($Vx,[2,32]),o($Vx,[2,33]),o($Vx,[2,34]),{24:$Vy,30:[1,205],47:70,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:61,60:$VK,61:$VL,62:62,63:$VM,64:$VN,65:$VO,66:63,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,73:64,74:$VV,75:$VW,76:$VX,77:65,78:$VY,79:$VZ,80:66,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,89:67,98:$V31,103:$V41},o($V51,[2,94]),{8:112,20:$V3,23:$V5,24:$V6,31:206,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{24:$Vy,25:[1,207],47:70,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:61,60:$VK,61:$VL,62:62,63:$VM,64:$VN,65:$VO,66:63,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,73:64,74:$VV,75:$VW,76:$VX,77:65,78:$VY,79:$VZ,80:66,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,89:67,98:$V31,103:$V41},o($V32,[2,90],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),{8:112,20:$V3,23:$V5,24:$V6,25:[1,208],29:$V22,31:195,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,94:209,95:$Vl,96:37,97:194,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($V32,[2,106],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),o($V51,[2,112]),{28:[1,211],104:[1,210]},o($V42,[2,115]),o($V42,[2,118],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,45:[1,212],48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),o($V81,[2,131],{119:125,107:126,101:127,102:128,118:213,20:$V91,23:$Va1,24:$Vb1,25:$Vc1,32:$Vd1,33:$Ve1,34:$Vf1,35:$Vg1,36:$Vh1,37:$Vi1,38:$Vj1,39:$Vk1,44:$Vl1,45:$Vm1,46:$Vn1,48:$Vo1,49:$Vp1,50:$Vq1,51:$Vr1,52:$Vs1,53:$Vt1,54:$Vu1,55:$Vv1,56:$Vw1,57:$Vx1,58:$Vy1,60:$Vz1,61:$VA1,63:$VB1,64:$VC1,65:$VD1,67:$VE1,68:$VF1,69:$VG1,70:$VH1,74:$VI1,75:$VJ1,76:$VK1,78:$VL1,79:$VM1,81:$VN1,82:$VO1,83:$VP1,85:$VQ1,86:$VR1,87:$VS1,88:$VT1,95:$VU1,98:$VV1,99:$VW1,103:$VX1,104:$VY1,109:$Vo,110:$Vp,111:$VZ1,112:$V_1,113:$Vs,114:$Vt,115:$Vu,116:$V$1,120:$V02,121:$V12}),o($V71,[2,132]),{8:112,20:$V3,23:$V5,24:$V6,31:214,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($V71,[2,194]),o($V71,[2,134]),o($V71,[2,135]),o($V71,[2,136]),o($V71,[2,137]),o($V71,[2,138]),o($V71,[2,139]),o($V71,[2,140]),o($V71,[2,141]),o($V71,[2,142]),o($V71,[2,143]),o($V71,[2,144]),o($V71,[2,145]),o($V71,[2,146]),o($V71,[2,147]),o($V71,[2,148]),o($V71,[2,149]),o($V71,[2,150]),o($V71,[2,151]),o($V71,[2,152]),o($V71,[2,153]),o($V71,[2,154]),o($V71,[2,155]),o($V71,[2,156]),o($V71,[2,157]),o($V71,[2,158]),o($V71,[2,159]),o($V71,[2,160]),o($V71,[2,161]),o($V71,[2,162]),o($V71,[2,163]),o($V71,[2,164]),o($V71,[2,165]),o($V71,[2,166]),o($V71,[2,167]),o($V71,[2,168]),o($V71,[2,169]),o($V71,[2,170]),o($V71,[2,171]),o($V71,[2,172]),o($V71,[2,173]),o($V71,[2,174]),o($V71,[2,175]),o($V71,[2,176]),o($V71,[2,177]),o($V71,[2,178]),o($V71,[2,179]),o($V71,[2,180]),o($V71,[2,181]),o($V71,[2,182]),o($V71,[2,183]),o($V71,[2,184]),o($V71,[2,185]),o($V71,[2,186]),o($V71,[2,187]),o($V71,[2,188]),o($V71,[2,189]),o($V71,[2,190]),o($V71,[2,191]),o($V71,[2,192]),o([5,18,19,20,21,22,23,24,25,28,30,32,33,34,35,36,37,38,39,44,45,46,48,49,50,51,52,53,54,55,56,57,58,60,61,63,64,65,67,68,69,70,71,72,74,75,76,78,79,81,82,83,85,86,87,88,95,98,99,103,104,109,110,111,112,113,114,115,116],[2,16]),o($V32,[2,84],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),o($V32,[2,85],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),o($V32,[2,86],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),o($V32,[2,87],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),o($V32,[2,88],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),o($V32,[2,89],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),o($V51,[2,95]),{25:[1,215],28:$V52},o($V62,[2,100]),o($V62,[2,102],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),{8:112,20:$V3,23:$V5,24:$V6,31:217,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($V32,[2,104],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),o($V32,[2,105],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),{24:$Vy,47:70,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:61,60:$VK,61:$VL,62:62,63:$VM,64:$VN,65:$VO,66:63,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,73:64,74:$VV,75:$VW,76:$VX,77:65,78:$VY,79:$VZ,80:66,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,89:67,98:$V31,103:$V41,104:[1,218]},o($Vx,[2,19]),{8:112,20:$V3,23:[1,222],24:$V6,25:[1,219],26:220,27:221,29:$V72,31:114,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{24:$Vy,25:[1,224],47:70,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:61,60:$VK,61:$VL,62:62,63:$VM,64:$VN,65:$VO,66:63,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,73:64,74:$VV,75:$VW,76:$VX,77:65,78:$VY,79:$VZ,80:66,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,89:67,98:$V31,103:$V41},{24:[1,225]},{24:$Vy,25:[1,226],47:70,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:61,60:$VK,61:$VL,62:62,63:$VM,64:$VN,65:$VO,66:63,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,73:64,74:$VV,75:$VW,76:$VX,77:65,78:$VY,79:$VZ,80:66,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,89:67,98:$V31,103:$V41},o($Vx,[2,35]),{24:$Vy,25:[1,227],47:70,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:61,60:$VK,61:$VL,62:62,63:$VM,64:$VN,65:$VO,66:63,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,73:64,74:$VV,75:$VW,76:$VX,77:65,78:$VY,79:$VZ,80:66,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,89:67,98:$V31,103:$V41},o($V51,[2,81]),o($V51,[2,97]),{25:[1,228],28:$V52},o($V51,[2,113]),{8:112,20:$V3,23:$V5,24:$V6,31:121,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,104:[1,229],106:230,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{8:112,20:$V3,23:$V5,24:$V6,31:231,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($V71,[2,133]),{21:[1,232],24:$Vy,47:70,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:61,60:$VK,61:$VL,62:62,63:$VM,64:$VN,65:$VO,66:63,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,73:64,74:$VV,75:$VW,76:$VX,77:65,78:$VY,79:$VZ,80:66,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,89:67,98:$V31,103:$V41},o($V51,[2,96]),{8:112,20:$V3,23:$V5,24:$V6,29:$V22,31:195,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,97:233,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},o($V62,[2,103],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),o($V51,[2,111]),{6:234,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,19:$V2,20:$V3,22:$V4,23:$V5,24:$V6,30:$V7,31:20,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:$Ve,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{25:[1,235],28:[1,236]},o($V62,[2,22]),o([24,25,28,48,49,50,51,52,53,54,55,56,57,58,60,61,63,64,65,67,68,69,70,71,72,74,75,76,78,79,81,82,83,85,86,98,103],$V82),{23:[1,237]},{6:238,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,19:$V2,20:$V3,22:$V4,23:$V5,24:$V6,30:$V7,31:20,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:$Ve,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{8:112,20:$V3,23:$V5,24:$V6,31:239,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{6:240,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,19:$V2,20:$V3,22:$V4,23:$V5,24:$V6,30:$V7,31:20,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:$Ve,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{20:[1,242],40:241},o($V51,[2,98]),o($V51,[2,114]),o($V42,[2,116]),o($V42,[2,117],{59:61,62:62,66:63,73:64,77:65,80:66,89:67,47:70,24:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,60:$VK,61:$VL,63:$VM,64:$VN,65:$VO,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,74:$VV,75:$VW,76:$VX,78:$VY,79:$VZ,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,98:$V31,103:$V41}),o($V71,[2,193]),o($V62,[2,101]),o($Vx,[2,20]),{6:243,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,19:$V2,20:$V3,22:$V4,23:$V5,24:$V6,30:$V7,31:20,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:$Ve,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{23:[1,245],27:244,29:$V72},o($V62,[2,25]),o($Vw,[2,28],{33:[1,246]}),{24:$Vy,25:[1,247],47:70,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:61,60:$VK,61:$VL,62:62,63:$VM,64:$VN,65:$VO,66:63,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,73:64,74:$VV,75:$VW,76:$VX,77:65,78:$VY,79:$VZ,80:66,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,89:67,98:$V31,103:$V41},o($Vx,[2,31]),o($Vx,[2,36]),o($V92,$Va2,{41:248}),o($Vx,[2,21]),o($V62,[2,23]),o($V62,$V82),{6:249,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:$V1,19:$V2,20:$V3,22:$V4,23:$V5,24:$V6,30:$V7,31:20,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:$Ve,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{30:[1,250]},{21:[1,251],42:252,43:253,44:$Vb2,46:[1,254]},o($Vx,[2,29]),o($Vx,[2,30]),o($Vx,[2,37]),o($Vc2,$Va2,{41:256}),o($V92,[2,39]),{45:[1,257]},{8:112,20:$V3,23:$V5,24:$V6,31:258,78:$Vf,79:$Vg,84:33,85:$Vh,86:$Vi,87:$Vj,88:$Vk,90:31,91:32,92:34,93:35,95:$Vl,96:37,99:$Vm,101:47,102:48,103:$Vn,107:46,108:49,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv},{21:[1,259],43:253,44:$Vb2},o([18,19,20,21,22,23,24,30,32,34,35,36,37,38,39,44,78,79,85,86,87,88,95,99,103,109,110,111,112,113,114,115,116],$V0,{4:260}),{24:$Vy,45:[1,261],47:70,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:61,60:$VK,61:$VL,62:62,63:$VM,64:$VN,65:$VO,66:63,67:$VP,68:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,73:64,74:$VV,75:$VW,76:$VX,77:65,78:$VY,79:$VZ,80:66,81:$V_,82:$V$,83:$V01,85:$V11,86:$V21,89:67,98:$V31,103:$V41},o($Vx,[2,38]),o($Vc2,[2,42],{6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,31:20,90:31,91:32,84:33,92:34,93:35,96:37,107:46,101:47,102:48,108:49,18:$V1,19:$V2,20:$V3,22:$V4,23:$V5,24:$V6,30:$V7,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:$Ve,78:$Vf,79:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk,95:$Vl,99:$Vm,103:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv}),o([18,19,20,21,22,23,24,30,32,34,35,36,37,38,39,44,46,78,79,85,86,87,88,95,99,103,109,110,111,112,113,114,115,116],$V0,{4:262}),o($V92,[2,41],{6:5,7:6,8:7,9:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,31:20,90:31,91:32,84:33,92:34,93:35,96:37,107:46,101:47,102:48,108:49,18:$V1,19:$V2,20:$V3,22:$V4,23:$V5,24:$V6,30:$V7,32:$V8,34:$V9,35:$Va,36:$Vb,37:$Vc,38:$Vd,39:$Ve,78:$Vf,79:$Vg,85:$Vh,86:$Vi,87:$Vj,88:$Vk,95:$Vl,99:$Vm,103:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv})],
defaultActions: {3:[2,2],4:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var _originalParserMethod = parser.parse;

parser.parse = function(input, source) {
  parser.__macroList = {};
  parser.currentFile = source;
  return _originalParserMethod.call(this, input);
};

parser.ast = {};


function createSourceLocation(source, firstToken, lastToken) {
  return new SourceLocation(source, new Position(firstToken.first_line, firstToken.first_column), new Position(lastToken.last_line, lastToken.last_column));
}

function parseNumericLiteral(literal) {
  if (literal.charAt(0) === "0") {
    if (literal.charAt(1).toLowerCase() === "x") return parseInt(literal, 16);
    return parseInt(literal, 8);
  } else return Number(literal);
}

function addMacro(macro) {
  var macroList = parser.__macroList;
  var macroName = macro.id.name;
  var paramCount = macro.params.length;

  var macroItems;
  if (macroItems = macroList[macroName]) {
    if (macroItems[paramCount]) throw new Error('Parse Error: A macro with the footprint already exists');
  } else macroItems = macroList[macroName] = {};

  macroItems[paramCount] = macro;
}

/* AST Constructors */

function Program(body, macros, loc) {
  this.type = "Program";
  this.body = body;
  this.macros = macros;
  this.loc = loc;
}
parser.ast.Program = Program;

function Identifier(name, loc) {
  this.type = "Identifier";
  this.name = name;
  this.loc = loc;
}
parser.ast.Identifier = Identifier;

function OutIdentifier(name, loc) {
  this.type = "OutIdentifier";
  this.name = name;
  this.loc = loc;
}
parser.ast.OutIdentifier = OutIdentifier;

function LineComment(text, loc) {
  this.type = "LineComment";
  this.text = text;
  this.loc = loc;
}
parser.ast.LineComment = LineComment;

function BlockComment(text, loc) {
  this.type = "BlockComment";
  this.text = text;
  this.loc = loc;
}
parser.ast.BlockComment = BlockComment;

function BlockStatement(body, loc) {
  this.type = "BlockStatement";
  this.body = body;
  this.loc = loc;
}
parser.ast.BlockStatement = BlockStatement;

function StaticMacroStatement(id, body, loc) {
  this.type = "StaticMacroStatement";
  this.id = id;
  this.body = body;
  this.loc = loc;
}
parser.ast.StaticMacroStatement = StaticMacroStatement;

function MacroStatement(id, params, body, loc) {
  this.type = "MacroStatement";
  this.id = id;
  this.params = params;
  this.body = body;
  this.loc = loc;
}
parser.ast.MacroStatement = MacroStatement;

function EmptyStatement(loc) {
  this.type = "EmptyStatement";
  this.loc = loc;
}
parser.ast.EmptyStatement = EmptyStatement;

function ExpressionStatement(expression, loc) {
  this.type = "ExpressionStatement";
  this.expression = expression;
  this.loc = loc;
}
parser.ast.ExpressionStatement = ExpressionStatement;

function IfStatement(test, consequent, alternate, loc) {
  this.type = "IfStatement";
  this.test = test;
  this.consequent = consequent;
  this.alternate = alternate;
  this.loc = loc;
}
parser.ast.IfStatement = IfStatement;

function DoWhileStatement(body, test, loc) {
  this.type = "DoWhileStatement";
  this.body = body;
  this.test = test;
  this.loc = loc;
}
parser.ast.DoWhileStatement = DoWhileStatement;

function WhileStatement(test, body, loc) {
  this.type = "WhileStatement";
  this.test = test;
  this.body = body;
  this.loc = loc;
}
parser.ast.WhileStatement = WhileStatement;

function ContinueStatement(loc) {
  this.type = "ContinueStatement";
  this.loc = loc;
}
parser.ast.ContinueStatement = ContinueStatement;

function BreakStatement(loc) {
  this.type = "BreakStatement";
  this.loc = loc;
}
parser.ast.BreakStatement = BreakStatement;

function ReturnStatement(argument, loc) {
  this.type = "ReturnStatement";
  this.argument = argument;
  this.loc = loc;
}
parser.ast.ReturnStatement = ReturnStatement;

function SwitchStatement(discriminant, cases, loc) {
  this.type = "SwitchStatement";
  this.discriminant = discriminant;
  this.cases = cases;
  this.loc = loc;
}
parser.ast.SwitchStatement = SwitchStatement;

function SwitchCase(test, consequent, loc) {
  this.type = "SwitchCase";
  this.test = test;
  this.consequent = consequent;
  this.loc = loc;
}
parser.ast.SwitchCase = SwitchCase;

function ImportExpression(file, loc) {
  this.type = "ImportExpression";
  this.file = file;
  this.loc = loc;
}
parser.ast.ImportExpression = ImportExpression;

function OutExpression(expression, loc) {
  this.type = "OutExpression";
  this.expression = expression;
  this.loc = loc;
}

function MapExpression(elements, loc) {
  this.type = "MapExpression";
  this.elements = elements;
  this.loc = loc;
}
parser.ast.MapExpression = MapExpression;

function LogicalExpression(operator, left, right, loc) {
  this.type = "LogicalExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.LogicalExpression = LogicalExpression;

function BinaryExpression(operator, left, right, loc) {
  this.type = "BinaryExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.BinaryExpression = BinaryExpression;

function ComparisonExpression(operator, left, right, loc) {
  this.type = "ComparisonExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.ComparisonExpression = ComparisonExpression;

function ShiftExpression(operator, left, right, loc) {
  this.type = "ShiftExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.ShiftExpression = ShiftExpression;

function MathExpression(operator, left, right, loc) {
  this.type = "MathExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.MathExpression = MathExpression;

function UnaryExpression(center, prefix, postfix, loc) {
  this.type = "UnaryExpression";
  this.center = center;
  this.prefix = prefix;
  this.postfix = postfix;
  this.loc = loc;
}
parser.ast.UnaryExpression = UnaryExpression;

function MemberExpression(map, property, loc) {
  this.type = "MemberExpression";
  this.map = map;
  this.property = property;
  this.loc = loc;
}
parser.ast.MemberExpression = MemberExpression;

function CallExpression(block, params, loc) {
  this.type = "CallExpression";
  this.block = block;
  this.params = params;
  this.loc = loc;
}
parser.ast.CallExpression = CallExpression;

function KeyValueExpression(key, value, loc) {
  this.type = "KeyValueExpression";
  this.key = key;
  this.value = value;
  this.loc = loc;
}
parser.ast.KeyValueExpression = KeyValueExpression;

function InternalCallExpression(name, params, loc) {
  this.type = "InternalCallExpression";
  this.name = name;
  this.params = params;
  this.loc = loc;
}
parser.ast.InternalCallExpression = InternalCallExpression;

function AssignmentExpression(operator, left, right, loc) {
  this.type = "AssignmentExpression";
  this.operator = operator;
  this.left = left;
  this.right = right;
  this.loc = loc;
}
parser.ast.AssignmentExpression = AssignmentExpression;

function NullLiteral(loc) {
  this.type = "NullLiteral";
  this.loc = loc;
}
parser.ast.NullLiteral = NullLiteral;

function NumberLiteral(value, loc) {
  this.type = "NumberLiteral";
  this.value = value;
  this.loc = loc;
}
parser.ast.NumberLiteral = NumberLiteral;

function StringLiteral(value, loc) {
  this.type = "StringLiteral";
  this.value = value;
  this.loc = loc;
}
parser.ast.StringLiteral = StringLiteral;

function CommandLiteral(name, params, loc) {
  this.type = "CommandLiteral";
  this.name = name;
  this.params = params;
  this.loc = loc;
}
parser.ast.CommandLiteral = CommandLiteral;

function SourceLocation(source, start, end) {
  this.source = source;
  this.start = start;
  this.end = end;
}
parser.ast.SourceLocation = SourceLocation;

function Position(line, column) {
  this.line = line;
  this.column = column;
}
parser.ast.Position = Position;/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 121;
break;
case 1:/* skip whitespace */
break;
case 2:/* fixme: dont skip comments, should be 'BLOCK_COMMENT' */
break;
case 3:/* fixme: dont skip comments, should be 'LINE_COMMENT' */
break;
case 4:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2); return 115;
break;
case 5:yy_.yytext = yy_.yytext.substr(2); return 120;
break;
case 6:yy_.yytext = yy_.yytext.substr(1); this.begin('command'); return 116;
break;
case 7:yy_.yytext = yy_.yytext.substr(1); return 95;
break;
case 8:return 29;
break;
case 9:return 32;
break;
case 10:return 33;
break;
case 11:return 35;
break;
case 12:return 36;
break;
case 13:return 34;
break;
case 14:return 39;
break;
case 15:return 44;
break;
case 16:return 37;
break;
case 17:return 46;
break;
case 18:return 38;
break;
case 19:return 99;
break;
case 20:return 109;
break;
case 21:return 111;
break;
case 22:return 112;
break;
case 23:return 113;
break;
case 24:return 114;
break;
case 25:return 23;
break;
case 26:return 110;
break;
case 27:return 110;
break;
case 28:return 110;
break;
case 29:return 67;
break;
case 30:return 68;
break;
case 31:return 88;
break;
case 32:return 85;
break;
case 33:return 86;
break;
case 34:return 51;
break;
case 35:return 52;
break;
case 36:return 48;
break;
case 37:return 49;
break;
case 38:return 50;
break;
case 39:return 55;
break;
case 40:return 53;
break;
case 41:return 54;
break;
case 42:return 56;
break;
case 43:return 58;
break;
case 44:return 57;
break;
case 45:return 69;
break;
case 46:return 70;
break;
case 47:return 71;
break;
case 48:return 72;
break;
case 49:return 98;
break;
case 50:return 61;
break;
case 51:return 60;
break;
case 52:return 22;
break;
case 53:return 78;
break;
case 54:return 79;
break;
case 55:return 81;
break;
case 56:return 82;
break;
case 57:return 83;
break;
case 58:return 74;
break;
case 59:return 76;
break;
case 60:return 75;
break;
case 61:return 64;
break;
case 62:return 63;
break;
case 63:return 65;
break;
case 64:return 87;
break;
case 65:return 20;
break;
case 66:return 21;
break;
case 67:return 103;
break;
case 68:return 104;
break;
case 69:return 24;
break;
case 70:return 25;
break;
case 71:this.begin('INITIAL'); return 28;
break;
case 72:return 45;
break;
case 73:this.begin('INITIAL'); return 30;
break;
case 74:return 5;
break;
case 75:return 121;
break;
case 76:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\s+)/i,/^(?:\/\*(.|\r|\n)*?\*\/)/i,/^(?:\/\/.*(\r\n|\r|\n))/i,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7[0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-f]){2})|([u]([0-9a-f]){4})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7[0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-f]){2})|([u]([0-9a-f]){4})))|(\\(\r\n|\r|\n)))*')))/i,/^(?:\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7[0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-f]){2})|([u]([0-9a-f]){4})))/i,/^(?:\/((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*))/i,/^(?:\.((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*))/i,/^(?:out)/i,/^(?:if)/i,/^(?:else)/i,/^(?:while)/i,/^(?:continue)/i,/^(?:do)/i,/^(?:switch)/i,/^(?:case)/i,/^(?:break)/i,/^(?:default)/i,/^(?:return)/i,/^(?:import)/i,/^(?:null)/i,/^(?:infinity)/i,/^(?:nan)/i,/^(?:true)/i,/^(?:false)/i,/^(?:((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))((([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc])|[$_a-zA-Z]|(\\[u]([0-9a-f]){4}))|([\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc0-9\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19b0-\u19c0\u19c8\u19c9\u19d0-\u19d9\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1dc0-\u1de6\u1dfc-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f])|[0-9])*))/i,/^(?:((([0]|(([1-9])([0-9]+)*))\.([0-9]+)*(([e])([+-]?[0-9]+))?)|(\.([0-9]+)(([e])([+-]?[0-9]+))?)|(([0]|(([1-9])([0-9]+)*))(([e])([+-]?[0-9]+))?)))/i,/^(?:([0][x]([0-9a-f])+))/i,/^(?:([0]([0-7])+))/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+=)/i,/^(?:-=)/i,/^(?:\*=)/i,/^(?:\/=)/i,/^(?:%=)/i,/^(?:>>>=)/i,/^(?:<<=)/i,/^(?:>>=)/i,/^(?:&=)/i,/^(?:\^=)/i,/^(?:\|=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:#)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>>)/i,/^(?:<<)/i,/^(?:>>)/i,/^(?:&)/i,/^(?:\^)/i,/^(?:\|)/i,/^(?:~)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"command":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"INITIAL":{"rules":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}